// _TypographyUtils.less
// v1.1
// Last Updated : 2012-01-18 09:55
// Copyright : SID Presse
// Author : Arnaud GAUDIN

//GESTION DES TAILLES DE POLICE

//fonction de calcul des tailles en px avec gestion automatique du margin-bottom et du line-height
@getPxFontConfig(@fontSize: 12px){	
	//ratio de line-height par rapport à la baseline par défaut, toujours supérieur ou égal à 1
	@ratioLineHeight: floor((@fontSize - 1px) / @gridBaseline) + 1;			//on soustrait 1px à la taille pour ne pas avoir un doublon de line-height à taille de police égale
	//calcul du line-height en px
	@pxLineHeight: @gridBaseline * @ratioLineHeight;
	
	//calcul du décalage de la police par rapport à la baseline
	@offsetBaseline: floor((@pxLineHeight - (@fontSize * @fontGlobalLetterRatio)) / 2) + 0px;
	
	//application des paramètres
	font-size: @fontSize;
	line-height: @pxLineHeight;
}

//fonction de calcul des tailles de façon relative
@getEmFontConfig(@fontSize: 12; @topMargin: 10; @rightMargin:0; @bottomMargin: 10; @leftMargin:0; @lineHeight:16){
	//on ramène le ratio par rapport à une taille par défaut afin de garder automatiquement un rapport normal
	@ratioFontSize: (@fontSize / 12) * @fontGlobalSize;
	//on calcule la taille de police de façon relative à la taille générale de la page
	@emFontSize: round((@ratioFontSize / @fontGlobalSize) * 1000) / 1000em;
	//application taille de police
	font-size: @emFontSize;
	
	//on ramène le ratio par rapport à une taille par défaut afin de garder automatiquement un rapport normal
	@ratioTopMargin: (@topMargin / 12) * @fontGlobalSize;
	@ratioRightMargin: (@rightMargin / 12) * @fontGlobalSize;
	@ratioBottomMargin: (@bottomMargin / 12) * @fontGlobalSize;
	@ratioLeftMargin: (@leftMargin / 12) * @fontGlobalSize;
	//on calcule le margin de façon relative à la taille de la page
	@emTopMargin: round((@ratioTopMargin / @fontGlobalSize) * 1000) / 1000;
	@emRightMargin: round((@ratioRightMargin / @fontGlobalSize) * 1000) / 1000;
	@emBottomMargin: round((@ratioBottomMargin / @fontGlobalSize) * 1000) / 1000;
	@emLeftMargin: round((@ratioLeftMargin / @fontGlobalSize) * 1000) / 1000;
	//puis on compense par la taille de police
	@emLocalTopMargin: round((@emTopMargin / @emFontSize) * 1000) / 1000em;
	@emLocalRightMargin: round((@emRightMargin / @emFontSize) * 1000) / 1000em;
	@emLocalBottomMargin: round((@emBottomMargin / @emFontSize) * 1000) / 1000em;
	@emLocalLeftMargin: round((@emLeftMargin / @emFontSize) * 1000) / 1000em;
	//application des margins top et bottom
	margin:@emLocalTopMargin @emLocalRightMargin @emLocalBottomMargin @emLocalLeftMargin;
	
	//on ramène le ratio par rapport à une taille par défaut afin de garder automatiquement un rapport normal
	@ratioLineHeight: (@lineHeight / 12) * @fontGlobalSize;
	//on calcule le line-height de façon relative à la taille de police
	@emLineHeight: round((@ratioLineHeight / @fontSize) * 1000) / 1000em;
	line-height: @emLineHeight;
}