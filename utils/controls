<?php
/**
 * Launch this script in command line
 * 
 */

include ('cliColors.class.php');
$colors = new Colors(); // appel object colorisation

// recup hostname
//$hostname = $_SERVER["HOSTNAME"];
//echo $colors->getColoredString("  Hostname : ".$hostname, "dark_gray", "yellow") . "  \n";

/************************ parametres (no need, all in argv) **************************************/
// switch ($hostname) {
// 	case 'fedoralionel':
// 		$dirContentSite = "/data/www";
// 		$dirBE = "/data/www/base-editoriale";   
// 		break;

// 	case 'productionvm15':
// 		$dirContentSite = "/data/www/sitesv3";
// 		$dirBE = "data/www/sitesv3/_system_base-editoriale";  // serveur de prod
// 		break;

// 	default:
// 		$dirContentSite = "";
// 		$dirBE = "";  
// 		break;
// }


/**************************************************************************/

$utilisation = 
<<<EOF
         
  Utilisation : php controls argument1 argument2 argument3 [interactive]                                       
          
  argument1 : le dossier contenant du(des) site(s) [exemple: /data/www/ ]    

  argument2 : le(s) dossier(s) du(des) site(s) [exemples: IM* , _demo_ec-tenor, _demo_* ]     

  argument3 : la commande                                                
    --help         aide                                                        
    dumps          sauvegarde des sites de demo et des sites client en dump    

  argument4 (optionnel) : 
    interactive    mode humain / intéractif (avec validation des sites à traiter) 



EOF;
$help = $colors->getColoredString($utilisation, "green") . "\n";

// verification 3 arguments
if (count($argv)<4 || $argv[0]!='controls'){
	echo $colors->error("  ERREUR : il y a 3 arguments obligatoires");
	echo $help;
	exit;
}
// verification arg 1 is dir
if (!is_dir($argv[1])){
	echo $colors->error("  ERREUR : l'argument 1 doit être un répertoire valide ");
	echo $help;
	exit;
}


// récupération des 3 arguments
// le dossier contenant du site
$dirContentSite = $argv[1];
echo $colors->info("  Dossier contenant : ".$dirContentSite." ");
// le dossier du site
$dirSite = $argv[2];
echo $colors->info("  Dossier site : ".$dirSite." ");
// la commande choisie
$argCommande = $argv[3]; 
echo $colors->info("  Commande : ".$argCommande." ");
// arguement 4 optionnel
if (isset($argv[4]) && $argv[4]=='interactive'){
	$interactiveMode = true;
} else {
	$interactiveMode = false;
}


switch ($argCommande) {
	case '--help':
		echo $help;
		break;

	case 'dumps':
		$commande = "cd ".$dirContentSite."/##DIRSITE##;php symfony db:dump --auto=true";
		commandForAllSites($commande);
		break;

	case 'loadArticles':
		$commande = "cd ".$dirContentSite."/##DIRSITE##;php symfony be:loadArticles sections;php symfony be:loadArticles articles;";
		commandForAllSites($commande);
		break;

	case 'search-update':
		$commande = "cd ".$dirContentSite."/##DIRSITE##;php symfony dm:search-update;";
		commandForAllSites($commande);
		break;

	case 'sitemap-update':
		$commande = "cd ".$dirContentSite."/##DIRSITE##;php symfony dm:sitemap-update;";
		commandForAllSites($commande);
		break;







	case 'loadBE':
		$commande = "cd ".$dirContentSite."/##DIRSITE##;php symfony be:loadBE verbose --auto=true";
		commandForAllSites($commande);
		break;

	default:
		echo $help; 
		break;
}



/**
 * execute une commande pour les sites d'un dossier donné
 * @param  [type] $command  [description]
 * @param  [type] $dirContentSite [description]
 * @return [type]           [description]
 */
function commandForAllSites($commande){
	
	global $interactiveMode;
	global $dirContentSite;
	global $dirSite;
	global $argCommande;

	$colors = new Colors(); // appel object colorisation

	$dirContent = opendir($dirContentSite); 
	// compteur d'exécution
	//echo 
	

	$nbATraiter = 0;
	while($dir = readdir($dirContent)) {
		
		$aTraiter = false;
		if (substr($dirSite,-1) == '*'){
			if(substr($dir,0,strlen($dirSite)-1) == substr($dirSite,0,-1) && is_dir($dirContentSite.'/'.$dir)) {
				$aTraiter = true;
			}
		} else {
			if($dir == $dirSite && is_dir($dirContentSite.'/'.$dir)) {
				$aTraiter = true;
			}
		}

		if($aTraiter) {
			$sfFilename = $dirContentSite.'/'.$dir.'/symfony';
			if (is_file($sfFilename)){
				$nbATraiter ++;
				//echo $colors->important("A traiter > ". $dirContentSite.'/'.$dir);
				$interactiveValidation = true;  // validation humaine à vrai par défaut
				if ($interactiveMode){
					echo $colors->question("Pour le site ".$dirContentSite.'/'.$dir." souhaitez vous effectuer la commande ".$argCommande."? (oui/non)");
					$handle = fopen ("php://stdin","r");
					$line = fgets($handle);
					if(trim($line) != 'oui'){
					    $interactiveValidation = false;
					}
				} 
				if ($interactiveValidation){ // on traite si la validation humaine est faite
				 	echo $colors->important("  Début de traitement du site ".$dirContentSite.'/'.$dir." : ".$argCommande);
				 	$commande = str_replace('##DIRSITE##', $dir, $commande);
				 	exec($commande);
				 	echo ">".$commande."\n";
				 	echo $colors->important("  Fin de traitement du site ".$dirContentSite.'/'.$dir." : ".$argCommande);
				}
			} else {
				echo $colors->error("Site ".$dirContentSite.'/'.$dir." invalide : fichier ". $sfFilename." absent...");
			}
		} 
	}

	closedir($dirContent);

	if (!$nbATraiter) {
		echo $colors->error("Pas de site correspondant aux arguments...");
	} else {
		$libATraiter = ($nbATraiter>0)?" sites ont été traités ":" site a été traité ";
		echo $colors->info("  ".$nbATraiter." ".$libATraiter);	
	}
	
}


?>