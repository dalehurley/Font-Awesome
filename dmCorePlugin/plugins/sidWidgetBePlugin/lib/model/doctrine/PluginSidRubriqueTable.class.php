<?php

/**
 * PluginSidRubriqueTable
 *
 * This class has been auto-generated by the Doctrine ORM Framework
 */
class PluginSidRubriqueTable extends myDoctrineTable {

    /**
     * Returns an instance of this class.
     *
     * @return object PluginSidRubriqueTable
     */
    public static function getInstance() {
        return Doctrine_Core::getTable('SidRubrique');
    }

    /* Plus utilisée
      public function isRubrique($title) {
      $a = $this->createQuery('j')
      ->withI18n('fr', null, 'j', 'inner')
      ->where('jTranslation.title = ?', $title);

      return $a->execute()->count();
      }
     */
    /*
     * Teste si la rubrique existe et est active
     *
     * @ return boolean
     */

    public function isRubrique($title) {
        $a = $this->createQuery('a')
                ->withI18n(sfContext::getInstance()->getUser()->getCulture(), null, 'a')
                ->where('aTranslation.title = ? and a.is_active = ?', array($title, true));

        return $a->execute()->count();
    }

    /*
     * charge toutes les rubriques
     *
     * @ return Objet
     */

    public function allRubrique() {
        $b = $this->createQuery('j');
        return $b->execute();
    }

    /*
     * Donne l'Id de la rubrique par rapport à son nom
     *
     * @ return objet
     */

    public function getIdRubriqueByNameRubrique($nameRubrique) {
        $a = $this->createQuery('a')
                ->withI18n(sfContext::getInstance()->getUser()->getCulture(), null, 'a')
                ->where('aTranslation.title = ? and a.is_active = ?', array($nameRubrique, true));

        return $a->fetchOne();
    }

    public function findOneByTitleAndIsActive($title) {
        $a = $this->createQuery('r')
                ->withI18n(sfContext::getInstance()->getUser()->getCulture(), null, 'r')
                ->where('rTranslation.title = ? and r.is_active = ?', array($title, true));

        if ($a->execute()->count() < 1) {
            $rubrique = new SidRubrique();
            return $rubrique;
        } else {
            return $a->fetchOne();
        }
    }

    public function findOneByTitle($title) {
        $a = $this->createQuery('r')
                ->withI18n(sfContext::getInstance()->getUser()->getCulture(), null, 'r')
                ->where('rTranslation.title = ? ', array($title));

        if ($a->execute()->count() < 1) {
            $rubrique = new SidRubrique();
            return $rubrique;
        } else {
            return $a->fetchOne();
        }
    }
}